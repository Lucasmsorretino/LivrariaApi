// <auto-generated />
// Arquivo gerado automaticamente pelo Entity Framework Core - NÃO EDITAR MANUALMENTE
// Importa o Entity Framework Core para funcionalidades de ORM
using Microsoft.EntityFrameworkCore;
// Importa classes de infraestrutura do Entity Framework
using Microsoft.EntityFrameworkCore.Infrastructure;
// Importa funcionalidades específicas de migração
using Microsoft.EntityFrameworkCore.Migrations;
// Importa classes para conversão de valores entre tipos .NET e banco de dados
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
// Importa o contexto de dados da aplicação LivrariaApi
using LivrariaApi.Data;

// Desabilita warnings de nullability para este arquivo auto-gerado
#nullable disable

// Define o namespace específico para as migrações da LivrariaApi
namespace LivrariaApi.Migrations
{
    // Atributo que associa esta migração ao contexto DataContext
    [DbContext(typeof(DataContext))]
    // Atributo que identifica esta migração específica com timestamp e nome
    [Migration("20250831025355_CriarTabelaLivros")]
    // Classe partial que contém os metadados da migração
    partial class CriarTabelaLivros
    {
        // Método que constrói o modelo de dados alvo após aplicar esta migração
        // Define como o banco de dados deve ficar estruturado
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
// Suprime warnings específicos relacionados a APIs obsoletas
#pragma warning disable 612, 618
            // Define a versão do Entity Framework Core usada para gerar esta migração
            modelBuilder.HasAnnotation("ProductVersion", "6.0.31");

            // Configura a entidade Livro e seu mapeamento para o banco de dados
            modelBuilder.Entity("LivrariaApi.Livro", b =>
                {
                    // Configura a propriedade Id como chave primária auto-incremental
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd() // Valor gerado automaticamente na inserção
                        .HasColumnType("INTEGER"); // Tipo da coluna no SQLite

                    // Configura a propriedade Ano como coluna INTEGER
                    b.Property<int>("Ano")
                        .HasColumnType("INTEGER"); // Tipo da coluna no SQLite

                    // Configura a propriedade Autor como coluna TEXT obrigatória
                    b.Property<string>("Autor")
                        .IsRequired() // Campo não pode ser nulo
                        .HasMaxLength(200) // Tamanho máximo de 200 caracteres
                        .HasColumnType("TEXT"); // Tipo da coluna no SQLite

                    // Configura a propriedade Titulo como coluna TEXT obrigatória
                    b.Property<string>("Titulo")
                        .IsRequired() // Campo não pode ser nulo
                        .HasMaxLength(200) // Tamanho máximo de 200 caracteres
                        .HasColumnType("TEXT"); // Tipo da coluna no SQLite

                    // Define Id como chave primária da tabela
                    b.HasKey("Id");

                    // Mapeia a entidade para a tabela "Livros" no banco de dados
                    b.ToTable("Livros");
                });
// Restaura warnings que foram suprimidos anteriormente
#pragma warning restore 612, 618
        } // Fim do método BuildTargetModel
    } // Fim da classe CriarTabelaLivros
} // Fim do namespace LivrariaApi.Migrations
